/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }


    @Test void testAdd() {
        BinarySearch testEmpt =new BinarySearch();
      testEmpt.add(5);
      assertEquals(5,testEmpt.root.value);

      assertEquals(true,testEmpt.contains(5));

      Node <Integer> testNode=new Node<>(10);
       BinarySearch testBinary=new BinarySearch(testNode);
       testBinary.add(4);
       testBinary.add(15);
       assertEquals(10,testBinary.root.value);
       assertEquals(4,testBinary.root.leftChild.value);
       assertEquals(15,testBinary.root.rightChild.value);
       assertEquals(true,testBinary.contains(15));

    }


    @Test void traversal() {
        BinarySearch testTra =new BinarySearch(new Node<>(5));
        testTra.add(7);
        testTra.add(3);

        List <Integer> testList=testTra.preOrder(testTra.root);

        Integer [] testarray={5,3,7};
        List <Integer> testlist1= Arrays.asList(testarray);
        boolean testFlag=testList.indexOf(5)==testlist1.indexOf(5) &&testList.indexOf(7)==testlist1.indexOf(7)&&testList.indexOf(3)==testlist1.indexOf(3);
       assertEquals(true,testFlag);


        List <Integer> testList2=testTra.inOrder(testTra.root);
        Integer [] testarray2={3,5,7};
        List <Integer> testlist2= Arrays.asList(testarray2);
        boolean testFlag2=testList2.indexOf(5)==testlist2.indexOf(5) &&testList2.indexOf(7)==testlist2.indexOf(7)&&testList2.indexOf(3)==testlist2.indexOf(3);
        assertEquals(true,testFlag2);


        List <Integer> testList3=testTra.postOrder(testTra.root);
        Integer [] testarray3={3,7,5};
        List <Integer> testlist3= Arrays.asList(testarray3);
        boolean testFlag3=testList3.indexOf(5)==testlist3.indexOf(5) &&testList3.indexOf(7)==testlist3.indexOf(7)&&testList3.indexOf(3)==testlist3.indexOf(3);
        assertEquals(true,testFlag3);


    }

    @Test
    public void getMaxTest(){

        BinarySearch testTra =new BinarySearch(new Node<>(5));
        testTra.add(10);
        testTra.add(0);
        assertEquals(10,testTra.getMax());

        // test empty tree
        BinarySearch testEmpty =new BinarySearch();

        assertEquals(0,testEmpty.getMax());

        //only element on tree
        BinarySearch testOne =new BinarySearch(new Node<>(1));
        assertEquals(1,testOne.getMax());

    }


    @Test
    void teccstBreadthFirstTree() {

        Node root = new Node(5);
        BinarySearch  test = new BinarySearch(root);
        test.add(10);
        test.add(4);
        ArrayList <Integer> testOne=test.breadthFirstTree(test.root);

        boolean testFlag= testOne.indexOf(5) ==0 &&testOne.indexOf(4) ==1 && testOne.indexOf(10) ==2;
        assertEquals(true,testFlag);

       Node <Integer> tesNode=new Node<>(5);
        BinarySearch test2=new BinarySearch(tesNode);
        ArrayList <Integer> testTwo=test2.breadthFirstTree(test2.root);
       assertEquals(0,testTwo.indexOf(5));
















    }


}
